{"version":3,"file":"node-build.mjs","sources":["../../server/routes/demo.ts","../../server/lib/mongo.ts","../../server/services/notify.ts","../../server/routes/contact.ts","../../server/routes/profile.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["import { RequestHandler } from \"express\";\nimport { DemoResponse } from \"@shared/api\";\n\nexport const handleDemo: RequestHandler = (req, res) => {\n  const response: DemoResponse = {\n    message: \"Hello from Express server\",\n  };\n  res.status(200).json(response);\n};\n","import { MongoClient, Db, Collection } from \"mongodb\";\n\nlet client: MongoClient | null = null;\nlet db: Db | null = null;\n\nexport async function getDb(): Promise<Db> {\n  const uri = process.env.MONGODB_URI;\n  const dbName = process.env.MONGODB_DB;\n  if (!uri || !dbName) {\n    throw new Error(\"MONGODB_URI and MONGODB_DB must be set in environment\");\n  }\n  if (db) return db;\n  client = new MongoClient(uri);\n  await client.connect();\n  db = client.db(dbName);\n  return db;\n}\n\nexport async function getCollection<T = any>(\n  name: string,\n): Promise<Collection<T>> {\n  const database = await getDb();\n  return database.collection<T>(name);\n}\n\nexport async function closeMongo(): Promise<void> {\n  if (client) {\n    await client.close();\n    client = null;\n    db = null;\n  }\n}\n","import nodemailer from \"nodemailer\";\nimport twilio from \"twilio\";\n\nexport async function sendEmailSMTP(opts: {\n  subject: string;\n  text: string;\n  html?: string;\n}): Promise<void> {\n  const { SMTP_HOST, SMTP_PORT, SMTP_USER, SMTP_PASS, EMAIL_FROM, EMAIL_TO } =\n    process.env as Record<string, string | undefined>;\n  if (\n    !SMTP_HOST ||\n    !SMTP_PORT ||\n    !SMTP_USER ||\n    !SMTP_PASS ||\n    !EMAIL_FROM ||\n    !EMAIL_TO\n  ) {\n    return; // silently skip if SMTP not configured\n  }\n  const transporter = nodemailer.createTransport({\n    host: SMTP_HOST,\n    port: Number(SMTP_PORT),\n    secure: Number(SMTP_PORT) === 465,\n    auth: { user: SMTP_USER, pass: SMTP_PASS },\n  });\n  await transporter.sendMail({\n    from: EMAIL_FROM,\n    to: EMAIL_TO,\n    subject: opts.subject,\n    text: opts.text,\n    html: opts.html,\n  });\n}\n\nexport async function sendSMS(message: string): Promise<void> {\n  const { TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN, TWILIO_FROM_NUMBER, SMS_TO } =\n    process.env as Record<string, string | undefined>;\n  if (\n    !TWILIO_ACCOUNT_SID ||\n    !TWILIO_AUTH_TOKEN ||\n    !TWILIO_FROM_NUMBER ||\n    !SMS_TO\n  ) {\n    return; // silently skip if Twilio not configured\n  }\n  const client = twilio(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN);\n  await client.messages.create({\n    body: message,\n    from: TWILIO_FROM_NUMBER,\n    to: SMS_TO,\n  });\n}\n","import type { RequestHandler } from \"express\";\nimport { z } from \"zod\";\nimport { promises as fs } from \"fs\";\nimport path from \"path\";\nimport crypto from \"crypto\";\nimport type { ContactRequest, ContactResponse } from \"@shared/api\";\nimport { getCollection } from \"../lib/mongo\";\nimport { sendEmailSMTP, sendSMS } from \"../services/notify\";\n\nconst contactSchema = z.object({\n  name: z.string().min(1).max(200),\n  email: z.string().email().max(320),\n  message: z.string().min(1).max(5000),\n});\n\nconst ensureDataDir = async (dirPath: string) => {\n  try {\n    await fs.mkdir(dirPath, { recursive: true });\n  } catch {}\n};\n\nexport const handleContact: RequestHandler = async (req, res) => {\n  try {\n    const parsed = contactSchema.safeParse(req.body as ContactRequest);\n    if (!parsed.success) {\n      return res.status(400).json({\n        success: false,\n        error: \"Invalid request payload\",\n        issues: parsed.error.issues,\n      } satisfies ContactResponse);\n    }\n\n    const { name, email, message } = parsed.data;\n    const id = `msg_${crypto.randomUUID()}`;\n    const timestamp = new Date().toISOString();\n\n    const record = { id, name, email, message, timestamp };\n\n    let savedTo = \"file\";\n\n    // Try MongoDB first if env configured\n    try {\n      if (process.env.MONGODB_URI && process.env.MONGODB_DB) {\n        const collectionName = process.env.MONGODB_COLLECTION || \"contacts\";\n        const col = await getCollection(collectionName);\n        await col.insertOne(record);\n        savedTo = \"mongodb\";\n      } else {\n        throw new Error(\"MongoDB not configured\");\n      }\n    } catch {\n      // Fallback to file persistence\n      const dataDir = path.join(process.cwd(), \"server\", \"data\");\n      const filePath = path.join(dataDir, \"contacts.json\");\n      await ensureDataDir(dataDir);\n      let existing: unknown[] = [];\n      try {\n        const raw = await fs.readFile(filePath, \"utf8\");\n        existing = JSON.parse(raw);\n        if (!Array.isArray(existing)) existing = [];\n      } catch {\n        existing = [];\n      }\n      existing.push(record);\n      await fs.writeFile(filePath, JSON.stringify(existing, null, 2), \"utf8\");\n    }\n\n    // Fire-and-forget notifications\n    const subject = `New portfolio contact from ${name}`;\n    const text = `Time: ${timestamp}\\nName: ${name}\\nEmail: ${email}\\n\\nMessage:\\n${message}`;\n    void Promise.allSettled([sendEmailSMTP({ subject, text }), sendSMS(text)]);\n\n    const response: ContactResponse = {\n      success: true,\n      message: `Message received and saved to ${savedTo}`,\n      id,\n      timestamp,\n    };\n    return res.status(200).json(response);\n  } catch (err) {\n    return res.status(500).json({ success: false, error: \"Server error\" });\n  }\n};\n","import type { RequestHandler } from \"express\";\nimport type { ProfileResponse } from \"@shared/api\";\n\nexport const handleProfile: RequestHandler = (_req, res) => {\n  const profile: ProfileResponse = {\n    name: \"Rudraksh Taya\",\n    title: \"Computer Science Student\",\n    email: \"rudrakshstaya@gmail.com\",\n    skills: [\"React\", \"Node.js\", \"Python\", \"Java\"],\n    experience: \"3+ years\",\n    available: true,\n  };\n  res.json(profile);\n};\n","import \"dotenv/config\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport { handleDemo } from \"./routes/demo\";\nimport { handleContact } from \"./routes/contact\";\nimport { handleProfile } from \"./routes/profile\";\n\nexport async function createServer() {\n  const app = express();\n\n  // Middleware\n  app.use(cors());\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n\n  // Example API routes\n  app.get(\"/api/ping\", (_req, res) => {\n    const ping = process.env.PING_MESSAGE ?? \"ping\";\n    res.json({ message: ping });\n  });\n\n  app.get(\"/api/demo\", handleDemo);\n\n  // Contact & profile routes\n  app.post(\"/api/contact\", handleContact);\n  app.get(\"/api/profile\", handleProfile);\n  app.post(\n    \"/api/contact/intent\",\n    (await import(\"./routes/contact-intent\")).handleContactIntent,\n  );\n\n  app.get(\"/api/health\", (await import(\"./routes/health\")).handleHealth);\n\n  return app;\n}\n","import path from \"path\";\nimport { createServer } from \"./index\";\nimport express from \"express\";\nimport fs from \"fs\";\n\nconst app = await createServer();\nconst port = process.env.PORT || 3000;\n\n// In production, serve the built SPA files if present; otherwise run API-only\nconst __dirname = import.meta.dirname;\nconst distPath = path.join(__dirname, \"../spa\");\nconst spaExists = fs.existsSync(distPath);\n\nif (spaExists) {\n  // Serve static files\n  await app.use(express.static(distPath));\n\n  // Handle React Router - serve index.html for all non-API routes\n  await app.get(\"*\", (req, res) => {\n    // Don't serve index.html for API routes\n    if (req.path.startsWith(\"/api/\") || req.path.startsWith(\"/health\")) {\n      return res.status(404).json({ error: \"API endpoint not found\" });\n    }\n\n    res.sendFile(path.join(distPath, \"index.html\"));\n  });\n} else {\n  console.log(\"SPA build not found; running API-only mode\");\n}\n\nawait app.listen(port, () => {\n  console.log(`ðŸš€ Fusion Starter server running on port ${port}`);\n  console.log(`ðŸ“± Frontend: http://localhost:${port}`);\n  console.log(`ðŸ”§ API: http://localhost:${port}/api`);\n});\n\n// Graceful shutdown\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"ðŸ›‘ Received SIGTERM, shutting down gracefully\");\n  process.exit(0);\n});\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"ðŸ›‘ Received SIGINT, shutting down gracefully\");\n  process.exit(0);\n});\n"],"names":["client","fs","app"],"mappings":"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"}